#! /bin/bash

DEBUG=0  # set this to 1 to capture the EVT_FILE for each test

FAILED_TEST_LIST=""
FAILED_TEST_COUNT=0

EVT_FILE="/opt/test-runner/logs/events.log"
APPVIEW_LOG_FILE="/opt/test-runner/logs/appview.log"

starttest(){
    CURRENT_TEST=$1
    echo "==============================================="
    echo "             Testing $CURRENT_TEST             "
    echo "==============================================="
    ERR=0
}

evaltest(){
    echo "             Evaluating $CURRENT_TEST"
}

endtest(){
    if [ $ERR -eq "0" ]; then
        RESULT=PASSED
    else
        RESULT=FAILED
        FAILED_TEST_LIST+=$CURRENT_TEST
        FAILED_TEST_LIST+=" "
        FAILED_TEST_COUNT=$(($FAILED_TEST_COUNT + 1))
    fi

    echo "*************** $CURRENT_TEST $RESULT ***************"
    echo ""
    echo ""

    # copy the EVT_FILE to help with debugging
    if (( $DEBUG )) || [ $RESULT == "FAILED" ]; then
        cp -f $EVT_FILE $EVT_FILE.$CURRENT_TEST
    fi

    if [ $RESULT == "FAILED" ]; then
        cat $APPVIEW_LOG_FILE
    fi

    rm -f $EVT_FILE
    rm -f $APPVIEW_LOG_FILE
}

# This functions verifies crash files generated for viewed process
# (backtrace file and info file)
#
# Arguments:
#   $1 - process name
#   $2 - expected message info in backtrace file
#
# Returns:
#  None
#
verifySnapshot() {
    local fault_pid=`echo $!`
    local process_name=$1
    local backtrace_msg=$2

    sleep 1
    # Emulate CLI behavior
    kill -s SIGCONT $fault_pid
    sleep 1

    local snapshot_dir="/tmp/appview/$fault_pid"
    local info_file_path="$snapshot_dir/info*"
    local backtrace_file_path="$snapshot_dir/backtrace*"

    # The following preamble is common for all backtrace
    grep -a "AppView Version:" $info_file_path > /dev/null
    ERR+=$?
    grep -a "Unix Time: " $info_file_path > /dev/null
    ERR+=$?
    grep -a "PID: " $info_file_path > /dev/null
    ERR+=$?
    grep -a "Process name: $process_name" $info_file_path > /dev/null
    ERR+=$?
    grep -a -- "--- backtrace" $backtrace_file_path > /dev/null
    ERR+=$?
    grep -a "$backtrace_msg" $backtrace_file_path > /dev/null
    if [ $? != 0 ]; then
        ERR+=$?
        echo "verifySnapshot fails, params: $1 $2"
        cat $info_file_path
        cat $backtrace_file_path
    fi
    # clean it up
    rm -rf $snapshot_dir
}

#
# extract on musl
#
starttest extract_musl

appview extract /opt/extract_appview
ERR+=$?

count=$(readelf -d /opt/extract_appview/libappview.so | grep 'Shared library:.*ld-linux' | wc -l)
if [ $count -ne 0 ] ; then 
    ERR+=1
fi

count=$(readelf -d /opt/extract_appview/libappview.so | grep 'Shared library:.*ld-musl' | wc -l)
if [ $count -ne 1 ] ; then 
    ERR+=1
fi

endtest

#
# appview patch
#
starttest patch_on_musl
cp /usr/local/appview/lib/libappview.so /opt/patch_libappview
cp /usr/local/appview/bin/appview /opt/patch_libappview

count=$(readelf -d /opt/patch_libappview/libappview.so | grep 'Shared library:.*ld-linux' | wc -l)
if [ $count -ne 1 ] ; then
    ERR+=1
fi

/opt/patch_libappview/appview -p /opt/patch_libappview/libappview.so
ERR+=$?

md5_after_first_patch=$(md5sum /opt/patch_libappview/libappview.so)

count=$(readelf -d /opt/patch_libappview/libappview.so | grep 'Shared library:.*ld-musl' | wc -l)
if [ $count -ne 1 ] ; then
    ERR+=1
fi

/opt/patch_libappview/appview -p /opt/patch_libappview/libappview.so
ERR+=$?

md5_after_second_patch=$(md5sum /opt/patch_libappview/libappview.so)

if [ "$md5_after_first_patch" != "$md5_after_second_patch" ]; then
    ERR+=1
fi

endtest

#
# fwrite binary
#
starttest fwrite

appview -z /opt/fwrite/fwrite
ERR+=$?

sleep 0.5
count=$(grep '"source":"fs.open"' $EVT_FILE | wc -l)
if [ $count -ne 1 ] ; then
    ERR+=1
fi

count=$(grep '"source":"fs.duration"' $EVT_FILE | wc -l)
if [ $count -ne 1 ] ; then
    ERR+=1
fi

count=$(grep '"source":"fs.write"' $EVT_FILE | wc -l)
if [ $count -ne 1 ] ; then
    ERR+=1
fi

count=$(grep '"source":"fs.close"' $EVT_FILE | wc -l)
if [ $count -ne 1 ] ; then
    ERR+=1
fi

endtest

#
# verify fault_test_read_only_mem
#

starttest fault_test_read_only_mem

cd /opt/fault_test/

APPVIEW_SNAPSHOT_BACKTRACE=true appview -z -- ./fault_test 0 &

verifySnapshot "fault_test" "Invalid permissions for mapped object"

endtest

#
# verify fault_test_not_mapped_mem
#

starttest fault_test_not_mapped_mem

cd /opt/fault_test/

APPVIEW_SNAPSHOT_BACKTRACE=true appview -z -- ./fault_test 1 &

verifySnapshot "fault_test" "Address not mapped to object"

endtest

#
# verify fault_test_bus_error
#

starttest fault_test_bus_error

cd /opt/fault_test/

APPVIEW_SNAPSHOT_BACKTRACE=true appview -z -- ./fault_test 2 &

verifySnapshot "fault_test" "Nonexistent physical address"

endtest

#
# Illegal operand/opcode
#

starttest illegal_op_error

cd /opt/fault_test/

APPVIEW_SNAPSHOT_BACKTRACE=true appview -z ./fault_test 4 &

if [ "x86_64" = "$(uname -m)" ]; then
    verifySnapshot "fault_test" "Illegal operand"
else
    verifySnapshot "fault_test" "Illegal opcode"
fi

endtest

#
# tls
#
starttest tls

# socat receives over a tls session and writes to $EVT_FILE
cat /usr/local/appview/key.pem /usr/local/appview/cert.pem >> /tmp/appview.pem
socat OPENSSL-LISTEN:9109,reuseaddr,cert=/tmp/appview.pem,cafile=/tmp/appview.pem,fork,verify=0 $EVT_FILE &

# give socat a moment to get up and running
sleep 1

# run appview with a ton of env vars to send over tls session
  APPVIEW_EVENT_DEST=tcp://127.0.0.1:9109 \
  APPVIEW_EVENT_TLS_ENABLE=true \
  APPVIEW_EVENT_METRIC=true \
  APPVIEW_EVENT_TLS_CA_CERT_PATH=/tmp/appview.pem \
  appview -z ps -ef
retval=$?

evaltest

# Verify that ps -ef is successful
if [ $retval -ne 0 ]; then
    ERR+=1
fi

# Verify that data made it through
if ( ! grep '"sourcetype":"console"' $EVT_FILE ); then
    ERR+=1
fi

endtest

# cleanup socat, since we're done with it now
kill `pidof socat`

# Test SIGUSR2
cd /opt/sig_test
for FUNCTION in signal sigaction
do
  for TRIGGER in raise timer
  do
    starttest preloaded_sigusr2_using_${FUNCTION}_${TRIGGER}
    appview run --passthrough -- ./sigusrhandler $FUNCTION $TRIGGER > stdout.txt
    sleep 2
    grep "Handling SIGUSR2" stdout.txt
    ERR+=$?
    grep "dummy_file.txt" $EVT_FILE
    ERR+=$?
    rm stdout.txt
    endtest
  done
done



if (( $FAILED_TEST_COUNT == 0 )); then
    echo ""
    echo ""
    echo "*************** ALL TESTS PASSED ***************"
else
    echo "*************** SOME TESTS FAILED ***************"
    echo "Failed tests: $FAILED_TEST_LIST"
    echo "Refer to these files for more info:"
    for FAILED_TEST in $FAILED_TEST_LIST; do
        echo "  $EVT_FILE.$FAILED_TEST"
    done
fi

exit ${FAILED_TEST_COUNT}
